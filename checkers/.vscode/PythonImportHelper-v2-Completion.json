[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "isExtraImport": true,
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "isExtraImport": true,
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "checkers_game.board",
        "description": "checkers_game.board",
        "isExtraImport": true,
        "detail": "checkers_game.board",
        "documentation": {}
    },
    {
        "label": "Board",
        "kind": 6,
        "importPath": "checkers_game.board",
        "description": "checkers_game.board",
        "peekOfCode": "class Board:\n    def __init__(self):\n        self.board = []\n        self.selected_piece = None\n        self.black_left = self.white_left = 12\n        self.black_kings = self.white_kings = 0\n        self.createBoard()\n    def drawSquares(self, win):\n        win.fill(BROWN)\n        for row in range(ROWS):",
        "detail": "checkers_game.board",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "WIDTH = HEIGHT = 800\nROWS = COLS = 8\nSQUARE_SIZE = WIDTH // COLS\nPADDING = 10\nBROWN = (127, 72, 41)\nBEIGE = (187, 169, 178)\nWHITE = (220, 220, 220)\nBLACK = (51, 51, 51)\nGREEN = (41, 171, 135)\nCROWN = pygame.image.load('assets/crown.png')",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "ROWS",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "ROWS = COLS = 8\nSQUARE_SIZE = WIDTH // COLS\nPADDING = 10\nBROWN = (127, 72, 41)\nBEIGE = (187, 169, 178)\nWHITE = (220, 220, 220)\nBLACK = (51, 51, 51)\nGREEN = (41, 171, 135)\nCROWN = pygame.image.load('assets/crown.png')\nCROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "SQUARE_SIZE",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "SQUARE_SIZE = WIDTH // COLS\nPADDING = 10\nBROWN = (127, 72, 41)\nBEIGE = (187, 169, 178)\nWHITE = (220, 220, 220)\nBLACK = (51, 51, 51)\nGREEN = (41, 171, 135)\nCROWN = pygame.image.load('assets/crown.png')\nCROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "PADDING",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "PADDING = 10\nBROWN = (127, 72, 41)\nBEIGE = (187, 169, 178)\nWHITE = (220, 220, 220)\nBLACK = (51, 51, 51)\nGREEN = (41, 171, 135)\nCROWN = pygame.image.load('assets/crown.png')\nCROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "BROWN",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "BROWN = (127, 72, 41)\nBEIGE = (187, 169, 178)\nWHITE = (220, 220, 220)\nBLACK = (51, 51, 51)\nGREEN = (41, 171, 135)\nCROWN = pygame.image.load('assets/crown.png')\nCROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "BEIGE",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "BEIGE = (187, 169, 178)\nWHITE = (220, 220, 220)\nBLACK = (51, 51, 51)\nGREEN = (41, 171, 135)\nCROWN = pygame.image.load('assets/crown.png')\nCROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "WHITE = (220, 220, 220)\nBLACK = (51, 51, 51)\nGREEN = (41, 171, 135)\nCROWN = pygame.image.load('assets/crown.png')\nCROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "BLACK = (51, 51, 51)\nGREEN = (41, 171, 135)\nCROWN = pygame.image.load('assets/crown.png')\nCROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "GREEN = (41, 171, 135)\nCROWN = pygame.image.load('assets/crown.png')\nCROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "CROWN",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "CROWN = pygame.image.load('assets/crown.png')\nCROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "CROWN",
        "kind": 5,
        "importPath": "checkers_game.constants",
        "description": "checkers_game.constants",
        "peekOfCode": "CROWN = pygame.transform.scale(CROWN, (44, 44))",
        "detail": "checkers_game.constants",
        "documentation": {}
    },
    {
        "label": "Piece",
        "kind": 6,
        "importPath": "checkers_game.piece",
        "description": "checkers_game.piece",
        "peekOfCode": "class Piece:\n    def __init__(self, row, col, color):\n        self.row = row\n        self.col = col\n        self.color = color\n        self.king = True\n        self.direction = 1 if color == BLACK else -1\n        self.x = 0\n        self.y = 0\n        self.calculatePosition()",
        "detail": "checkers_game.piece",
        "documentation": {}
    },
    {
        "label": "gameLoop",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def gameLoop():\n    run = True\n    clock = pygame.time.Clock()\n    board.draw(WIN)\n    pygame.display.update()\n    while run:\n        pygame.display.update()\n        clock.tick(FPS)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "FPS = 60\nWIN = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption('Checkers')\nboard = Board()\ndef gameLoop():\n    run = True\n    clock = pygame.time.Clock()\n    board.draw(WIN)\n    pygame.display.update()\n    while run:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "WIN",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "WIN = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption('Checkers')\nboard = Board()\ndef gameLoop():\n    run = True\n    clock = pygame.time.Clock()\n    board.draw(WIN)\n    pygame.display.update()\n    while run:\n        pygame.display.update()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "board = Board()\ndef gameLoop():\n    run = True\n    clock = pygame.time.Clock()\n    board.draw(WIN)\n    pygame.display.update()\n    while run:\n        pygame.display.update()\n        clock.tick(FPS)\n        for event in pygame.event.get():",
        "detail": "main",
        "documentation": {}
    }
]